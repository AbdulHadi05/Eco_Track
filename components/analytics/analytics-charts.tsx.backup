"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { 
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, 
  LineChart, Line, PieChart, Pie, Cell, AreaChart, Area, RadarChart,
  PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar
} from "recharts"
import { 
  TrendingUp, TrendingDown, Users, Clock, Smartphone, Monitor, 
  ThumbsUp, ThumbsDown, Minus, Star, Calendar, BarChart3, PieChart as PieChartIcon
} from "lucide-react"
import type { Analytics } from "@/lib/types"

interface AnalyticsChartsProps {
  analytics: Analytics
  formTitle: string
}

const COLORS = {
  primary: "hsl(var(--primary))",
  secondary: "hsl(var(--secondary))", 
  success: "#10b981",
  warning: "#f59e0b",
  danger: "#ef4444",
  info: "#3b82f6",
  purple: "#8b5cf6",
  pink: "#ec4899",
  indigo: "#6366f1"
}

const CHART_COLORS = [COLORS.primary, COLORS.secondary, COLORS.success, COLORS.warning, COLORS.danger, COLORS.info, COLORS.purple, COLORS.pink, COLORS.indigo]

export function AnalyticsCharts({ analytics, formTitle }: AnalyticsChartsProps) {
  const { 
    totalResponses, responseRate, averageRating, topFeedback, responsesByDate,
    responsesByHour, responsesByDayOfWeek, responsesByMonth, fieldAnalytics,
    completionRate, deviceAnalytics, sentimentAnalysis, trends
  } = analytics

  // Prepare chart data
  const responseTimeData = responsesByDate.map((item) => ({
    date: new Date(item.date).toLocaleDateString("en-US", { month: "short", day: "numeric" }),
    responses: item.count,
  }))

  const hourlyData = responsesByHour.map(item => ({
    hour: `${item.hour}:00`,
    responses: item.count
  }))

  const deviceData = [
    { name: 'Desktop', value: deviceAnalytics.desktop, color: COLORS.primary },
    { name: 'Mobile', value: deviceAnalytics.mobile, color: COLORS.secondary },
    { name: 'Tablet', value: deviceAnalytics.tablet, color: COLORS.success },
    { name: 'Unknown', value: deviceAnalytics.unknown, color: COLORS.warning }
  ]

  const weeklyData = responsesByDayOfWeek.map(item => ({
    day: item.day.substring(0, 3),
    responses: item.count
  }))

  const monthlyData = responsesByMonth.map(item => ({
    month: new Date(item.month + '-01').toLocaleDateString("en-US", { month: "short" }),
    responses: item.count
  }))

  const sentimentData = sentimentAnalysis ? [
    { name: 'Positive', value: sentimentAnalysis.positive, color: COLORS.success },
    { name: 'Neutral', value: sentimentAnalysis.neutral, color: COLORS.warning },
    { name: 'Negative', value: sentimentAnalysis.negative, color: COLORS.danger }
  ] : []

  // Field performance data
  const fieldPerformanceData = fieldAnalytics.map(field => ({
    name: field.fieldLabel.length > 15 ? field.fieldLabel.substring(0, 15) + '...' : field.fieldLabel,
    responses: field.responses.length,
    completion: (field.responses.length / totalResponses) * 100
  }))

  // Custom tooltip component
  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-white p-3 border rounded-lg shadow-lg">
          <p className="font-medium">{`${label}`}</p>
          {payload.map((entry: any, index: number) => (
            <p key={index} style={{ color: entry.color }}>
              {`${entry.dataKey}: ${entry.value}`}
            </p>
          ))}
        </div>
      )
    }
    return null
  }

  return (
    <div className="space-y-6">
      {/* Overview Stats Grid */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Responses</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalResponses.toLocaleString()}</div>
            <p className="text-xs text-muted-foreground flex items-center">
              {trends.responseGrowth > 0 ? (
                <><TrendingUp className="mr-1 h-3 w-3 text-green-500" /> +{trends.responseGrowth}% from last week</>
              ) : trends.responseGrowth < 0 ? (
                <><TrendingDown className="mr-1 h-3 w-3 text-red-500" /> {trends.responseGrowth}% from last week</>
              ) : (
                <><Minus className="mr-1 h-3 w-3 text-gray-500" /> No change from last week</>
              )}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Response Rate</CardTitle>
            <BarChart3 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{responseRate.toFixed(1)}%</div>
            <Progress value={responseRate} className="mt-2" />
            <p className="text-xs text-muted-foreground mt-1">Conversion rate</p>
          </CardContent>
        </Card>

        {averageRating && (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Average Rating</CardTitle>
              <Star className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold flex items-center">
                {averageRating.toFixed(1)}
                <div className="flex ml-2">
                  {[1, 2, 3, 4, 5].map((star) => (
                    <Star 
                      key={star} 
                      className={`h-4 w-4 ${star <= Math.round(averageRating) ? 'text-yellow-400 fill-current' : 'text-gray-300'}`} 
                    />
                  ))}
                </div>
              </div>
              <p className="text-xs text-muted-foreground flex items-center">
                {trends.ratingTrend > 0 ? (
                  <><TrendingUp className="mr-1 h-3 w-3 text-green-500" /> +{trends.ratingTrend.toFixed(1)} trend</>
                ) : trends.ratingTrend < 0 ? (
                  <><TrendingDown className="mr-1 h-3 w-3 text-red-500" /> {trends.ratingTrend.toFixed(1)} trend</>
                ) : (
                  <><Minus className="mr-1 h-3 w-3 text-gray-500" /> Stable</>
                )}
              </p>
            </CardContent>
          </Card>
        )}

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Completion Rate</CardTitle>
            <Clock className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{completionRate.toFixed(1)}%</div>
            <Progress value={completionRate} className="mt-2" />
            <p className="text-xs text-muted-foreground mt-1">All required fields</p>
          </CardContent>
        </Card>
      </div>

      {/* Sentiment Analysis */}
      {sentimentAnalysis && (
        <div className="grid gap-4 md:grid-cols-4">
          <Card className="col-span-1">
            <CardHeader>
              <CardTitle className="flex items-center text-sm">
                <ThumbsUp className="mr-2 h-4 w-4 text-green-500" />
                Sentiment Analysis
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-sm text-green-600">Positive</span>
                <Badge variant="secondary" className="bg-green-100 text-green-800">
                  {sentimentAnalysis.positive}
                </Badge>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-yellow-600">Neutral</span>
                <Badge variant="secondary" className="bg-yellow-100 text-yellow-800">
                  {sentimentAnalysis.neutral}
                </Badge>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-red-600">Negative</span>
                <Badge variant="secondary" className="bg-red-100 text-red-800">
                  {sentimentAnalysis.negative}
                </Badge>
              </div>
            </CardContent>
          </Card>

          <Card className="col-span-3">
            <CardHeader>
              <CardTitle>Sentiment Distribution</CardTitle>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={200}>
                <PieChart>
                  <Pie
                    data={sentimentData}
                    cx="50%"
                    cy="50%"
                    outerRadius={80}
                    dataKey="value"
                    label={({ name, value }) => `${name}: ${value}`}
                  >
                    {sentimentData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Main Charts Tabs */}
      <Tabs defaultValue="timeline" className="space-y-4">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="timeline">Timeline</TabsTrigger>
          <TabsTrigger value="patterns">Patterns</TabsTrigger>
          <TabsTrigger value="fields">Fields</TabsTrigger>
          <TabsTrigger value="devices">Devices</TabsTrigger>
          <TabsTrigger value="insights">Insights</TabsTrigger>
        </TabsList>

        <TabsContent value="timeline" className="space-y-6">
          <div className="grid gap-6 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>Responses Over Time</CardTitle>
                <CardDescription>Daily response count for the past 30 days</CardDescription>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <AreaChart data={responseTimeData}>
                    <defs>
                      <linearGradient id="colorResponses" x1="0" y1="0" x2="0" y2="1">
                        <stop offset="5%" stopColor={COLORS.primary} stopOpacity={0.3}/>
                        <stop offset="95%" stopColor={COLORS.primary} stopOpacity={0}/>
                      </linearGradient>
                    </defs>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="date" />
                    <YAxis />
                    <Tooltip content={<CustomTooltip />} />
                    <Area
                      type="monotone"
                      dataKey="responses"
                      stroke={COLORS.primary}
                      fillOpacity={1}
                      fill="url(#colorResponses)"
                    />
                  </AreaChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Monthly Trends</CardTitle>
                <CardDescription>Response volume by month</CardDescription>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <LineChart data={monthlyData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="month" />
                    <YAxis />
                    <Tooltip content={<CustomTooltip />} />
                    <Line
                      type="monotone"
                      dataKey="responses"
                      stroke={COLORS.secondary}
                      strokeWidth={3}
                      dot={{ fill: COLORS.secondary, strokeWidth: 2 }}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="patterns" className="space-y-6">
          <div className="grid gap-6 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>Response by Hour</CardTitle>
                <CardDescription>When do people respond most?</CardDescription>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={hourlyData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="hour" />
                    <YAxis />
                    <Tooltip content={<CustomTooltip />} />
                    <Bar dataKey="responses" fill={COLORS.success} radius={[4, 4, 0, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Response by Day of Week</CardTitle>
                <CardDescription>Weekly response patterns</CardDescription>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={weeklyData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="day" />
                    <YAxis />
                    <Tooltip content={<CustomTooltip />} />
                    <Bar dataKey="responses" fill={COLORS.warning} radius={[4, 4, 0, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="fields" className="space-y-6">
          <div className="grid gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Field Performance</CardTitle>
                <CardDescription>Response rates by form field</CardDescription>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={fieldPerformanceData} layout="horizontal">
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis type="number" />
                    <YAxis dataKey="name" type="category" width={100} />
                    <Tooltip content={<CustomTooltip />} />
                    <Bar dataKey="responses" fill={COLORS.info} radius={[0, 4, 4, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              {fieldAnalytics.slice(0, 6).map((field, index) => (
                <Card key={field.fieldId}>
                  <CardHeader className="pb-3">
                    <CardTitle className="text-sm">{field.fieldLabel}</CardTitle>
                    <CardDescription className="text-xs">
                      {field.fieldType} • {field.responses.length} responses
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    {field.averageValue !== undefined && (
                      <div className="text-lg font-bold mb-2">
                        Avg: {field.averageValue.toFixed(1)}
                      </div>
                    )}
                    {field.mostCommonResponse && (
                      <div className="text-sm text-muted-foreground">
                        Most common: "{String(field.mostCommonResponse).substring(0, 30)}..."
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        </TabsContent>

        <TabsContent value="devices" className="space-y-6">
          <div className="grid gap-6 md:grid-cols-2">
            <Card>
              <CardHeader>
                <CardTitle>Device Distribution</CardTitle>
                <CardDescription>How users access your form</CardDescription>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <PieChart>
                    <Pie
                      data={deviceData}
                      cx="50%"
                      cy="50%"
                      outerRadius={100}
                      dataKey="value"
                      label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                    >
                      {deviceData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Device Stats</CardTitle>
                <CardDescription>Breakdown by device type</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <Monitor className="mr-2 h-4 w-4 text-blue-500" />
                    <span>Desktop</span>
                  </div>
                  <div className="text-right">
                    <div className="font-bold">{deviceAnalytics.desktop}</div>
                    <div className="text-xs text-muted-foreground">
                      {((deviceAnalytics.desktop / totalResponses) * 100).toFixed(1)}%
                    </div>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <Smartphone className="mr-2 h-4 w-4 text-green-500" />
                    <span>Mobile</span>
                  </div>
                  <div className="text-right">
                    <div className="font-bold">{deviceAnalytics.mobile}</div>
                    <div className="text-xs text-muted-foreground">
                      {((deviceAnalytics.mobile / totalResponses) * 100).toFixed(1)}%
                    </div>
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <Monitor className="mr-2 h-4 w-4 text-purple-500" />
                    <span>Tablet</span>
                  </div>
                  <div className="text-right">
                    <div className="font-bold">{deviceAnalytics.tablet}</div>
                    <div className="text-xs text-muted-foreground">
                      {((deviceAnalytics.tablet / totalResponses) * 100).toFixed(1)}%
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="insights" className="space-y-6">
          <div className="grid gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Key Insights</CardTitle>
                <CardDescription>AI-powered analysis of your form performance</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="p-4 bg-blue-50 rounded-lg border border-blue-200">
                  <h4 className="font-semibold text-blue-800 mb-2">📈 Performance Trend</h4>
                  <p className="text-blue-700 text-sm">
                    Your form has received {totalResponses} responses with a {responseRate.toFixed(1)}% response rate. 
                    {trends.responseGrowth > 0 
                      ? ` Responses are growing by ${trends.responseGrowth.toFixed(1)}% week-over-week.`
                      : trends.responseGrowth < 0 
                      ? ` Responses declined by ${Math.abs(trends.responseGrowth).toFixed(1)}% this week.`
                      : ' Response rate is stable.'
                    }
                  </p>
                </div>

                {averageRating && (
                  <div className="p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                    <h4 className="font-semibold text-yellow-800 mb-2">⭐ Rating Analysis</h4>
                    <p className="text-yellow-700 text-sm">
                      Average rating is {averageRating.toFixed(1)} out of 5 stars.
                      {trends.ratingTrend > 0.1 
                        ? ` Ratings are improving with a positive trend of +${trends.ratingTrend.toFixed(1)}.`
                        : trends.ratingTrend < -0.1
                        ? ` Ratings are declining with a negative trend of ${trends.ratingTrend.toFixed(1)}.`
                        : ' Ratings are consistent.'
                      }
                    </p>
                  </div>
                )}

                <div className="p-4 bg-green-50 rounded-lg border border-green-200">
                  <h4 className="font-semibold text-green-800 mb-2">✅ Completion Analysis</h4>
                  <p className="text-green-700 text-sm">
                    {completionRate.toFixed(1)}% of respondents complete all required fields.
                    {completionRate > 80 
                      ? ' This is an excellent completion rate!'
                      : completionRate > 60
                      ? ' This is a good completion rate, but there\'s room for improvement.'
                      : ' Consider simplifying your form to improve completion rates.'
                    }
                  </p>
                </div>

                {sentimentAnalysis && (
                  <div className="p-4 bg-purple-50 rounded-lg border border-purple-200">
                    <h4 className="font-semibold text-purple-800 mb-2">💭 Sentiment Insights</h4>
                    <p className="text-purple-700 text-sm">
                      Sentiment analysis shows {sentimentAnalysis.positive} positive, {sentimentAnalysis.neutral} neutral, 
                      and {sentimentAnalysis.negative} negative responses. 
                      {sentimentAnalysis.positive > sentimentAnalysis.negative 
                        ? ' Overall sentiment is positive!'
                        : sentimentAnalysis.positive < sentimentAnalysis.negative
                        ? ' Consider addressing concerns mentioned in negative feedback.'
                        : ' Sentiment is balanced across responses.'
                      }
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>

            {topFeedback.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle>Recent Feedback</CardTitle>
                  <CardDescription>Latest responses from your users</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {topFeedback.slice(0, 5).map((feedback, index) => (
                      <div key={index} className="p-3 bg-gray-50 rounded-lg">
                        <p className="text-sm">"{feedback}"</p>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}
          <CardContent>
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={responseData}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="responses" fill="hsl(var(--primary))" />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
      </div>

      {/* Rating Breakdown */}
      {averageRating && (
        <Card>
          <CardHeader>
            <CardTitle>Rating Analysis</CardTitle>
            <CardDescription>Average rating breakdown</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center space-x-4">
              <div className="flex-1">
                <div className="flex items-center space-x-2 mb-2">
                  <span className="text-2xl font-bold">{averageRating.toFixed(1)}</span>
                  <div className="flex">
                    {[1, 2, 3, 4, 5].map((star) => (
                      <span
                        key={star}
                        className={`text-lg ${star <= Math.round(averageRating) ? "text-yellow-400" : "text-gray-300"}`}
                      >
                        ★
                      </span>
                    ))}
                  </div>
                </div>
                <div className="space-y-2">
                  {[5, 4, 3, 2, 1].map((rating) => (
                    <div key={rating} className="flex items-center space-x-2">
                      <span className="text-sm w-8">{rating}★</span>
                      <div className="flex-1 bg-muted rounded-full h-2">
                        <div
                          className="bg-primary h-2 rounded-full"
                          style={{
                            width: `${rating <= averageRating ? (rating / 5) * 100 : 0}%`,
                          }}
                        />
                      </div>
                      <span className="text-sm text-muted-foreground w-8">
                        {Math.round((rating / 5) * totalResponses)}
                      </span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Top Feedback */}
      {topFeedback.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Recent Feedback</CardTitle>
            <CardDescription>Latest text responses from your form</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {topFeedback.slice(0, 5).map((feedback, index) => (
                <div key={index} className="p-3 bg-muted rounded-lg">
                  <p className="text-sm">{feedback}</p>
                  <p className="text-xs text-muted-foreground mt-1">Response #{totalResponses - index}</p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
